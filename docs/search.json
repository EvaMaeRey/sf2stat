[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 sf2stat authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). sf2stat: Package (One Line, Title Case). R package version 0.0.0.9000, https://evamaerey.github.io/sf2stat/.","code":"@Manual{,   title = {sf2stat: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://evamaerey.github.io/sf2stat/}, }"},{"path":"/index.html","id":"part-0-proposal","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"Proposing {sf2stat} package! ü¶Ñ goal {sf2stat} make easier prep sf data use ggproto Stat computation; Stat can used creating stat/geom function used ggplot2 plots. Without package, live effortful world, ‚Äôd prep data including figuring bounding box geometry, , want labeling functionality, centroid geometry. {sf2stat} package, ‚Äôll live different world (ü¶Ñ ü¶Ñ ü¶Ñ) task snap ü´∞: Proposed API:","code":"library(sf2stat)  my_geom_ref_data <- sf_df_prep_for_stat(data, id_col_name = county_name)"},{"path":"/index.html","id":"package-build-part-i-work-out-functionality-","dir":"","previous_headings":"","what":"Package build Part I. Work out functionality ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"section ‚Äôll use nc sf dataframe check functions work.","code":""},{"path":"/index.html","id":"select-toy-sf-data","dir":"","previous_headings":"","what":"Select toy sf data","title":"What the Package Does (One Line, Title Case)","text":"","code":"nc <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\")) %>%   select(NAME, FIPS) #> Reading layer `nc' from data source  #>   `/Library/Frameworks/R.framework/Versions/4.2/Resources/library/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27  nc #> Simple feature collection with 100 features and 2 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 #> First 10 features: #>           NAME  FIPS                       geometry #> 1         Ashe 37009 MULTIPOLYGON (((-81.47276 3... #> 2    Alleghany 37005 MULTIPOLYGON (((-81.23989 3... #> 3        Surry 37171 MULTIPOLYGON (((-80.45634 3... #> 4    Currituck 37053 MULTIPOLYGON (((-76.00897 3... #> 5  Northampton 37131 MULTIPOLYGON (((-77.21767 3... #> 6     Hertford 37091 MULTIPOLYGON (((-76.74506 3... #> 7       Camden 37029 MULTIPOLYGON (((-76.00897 3... #> 8        Gates 37073 MULTIPOLYGON (((-76.56251 3... #> 9       Warren 37185 MULTIPOLYGON (((-78.30876 3... #> 10      Stokes 37169 MULTIPOLYGON (((-80.02567 3..."},{"path":"/index.html","id":"sf_df_add_xy_center_coords","dir":"","previous_headings":"","what":"sf_df_add_xy_center_coords()","title":"What the Package Does (One Line, Title Case)","text":"First function takes sf data frame adds columns x y centroids geometries.","code":"sf_df_add_xy_center_coords <- function(sf_df){  sf_df |>     dplyr::pull(geometry) |>     sf::st_zm() |>     sf::st_point_on_surface() ->   points_sf  the_coords <- do.call(rbind, sf::st_geometry(points_sf)) |>   tibble::as_tibble() |> setNames(c(\"x\",\"y\"))  cbind(sf_df, the_coords)  } nc |> sf_df_add_xy_center_coords() #> Warning in st_point_on_surface.sfc(sf::st_zm(dplyr::pull(sf_df, geometry))): #> st_point_on_surface may not give correct results for longitude/latitude data #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if #> `.name_repair` is omitted as of tibble 2.0.0. #> ‚Ñπ Using compatibility `.name_repair`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Simple feature collection with 100 features and 4 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 #> First 10 features: #>           NAME  FIPS         x        y                       geometry #> 1         Ashe 37009 -81.49496 36.42112 MULTIPOLYGON (((-81.47276 3... #> 2    Alleghany 37005 -81.13241 36.47396 MULTIPOLYGON (((-81.23989 3... #> 3        Surry 37171 -80.69280 36.38828 MULTIPOLYGON (((-80.45634 3... #> 4    Currituck 37053 -75.93852 36.30697 MULTIPOLYGON (((-76.00897 3... #> 5  Northampton 37131 -77.36988 36.35211 MULTIPOLYGON (((-77.21767 3... #> 6     Hertford 37091 -77.04217 36.39709 MULTIPOLYGON (((-76.74506 3... #> 7       Camden 37029 -76.18290 36.36249 MULTIPOLYGON (((-76.00897 3... #> 8        Gates 37073 -76.72199 36.43576 MULTIPOLYGON (((-76.56251 3... #> 9       Warren 37185 -78.11342 36.42681 MULTIPOLYGON (((-78.30876 3... #> 10      Stokes 37169 -80.23459 36.40106 MULTIPOLYGON (((-80.02567 3..."},{"path":"/index.html","id":"sf_df_return_bbox_df","dir":"","previous_headings":"","what":"sf_df_return_bbox_df()","title":"What the Package Does (One Line, Title Case)","text":"Second function ‚Äôs going return bounding boxes dataframe. reference data need xmin, xmax variables row data.","code":"sf_df_return_bbox_df <- function(sf_df){      bb <- sf::st_bbox(sf_df)    data.frame(xmin = bb[1], ymin = bb[2],              xmax = bb[3], ymax = bb[4])  } nc[10,] |> sf_df_return_bbox_df() #>           xmin     ymin      xmax     ymax #> xmin -80.45301 36.25023 -80.02406 36.55104"},{"path":"/index.html","id":"sf_df_prep_for_stat","dir":"","previous_headings":"","what":"sf_df_prep_for_stat()","title":"What the Package Does (One Line, Title Case)","text":"Finally bundle user-facing function take sf dataframe add required columns display ggplot2 sf layer.","code":"sf_df_prep_for_stat <- function(sf_df, id_col_name = NULL){      sf_df |>     # using purrr allows us to get bb for each row     dplyr::mutate(bb =                     purrr::map(geometry,                                sf_df_return_bbox_df)) |>     tidyr::unnest(bb) |>     data.frame() |>     sf_df_add_xy_center_coords() ->   sf_df_w_bb_and_centers    # use first column as keep/drop column unless otherwise specified   if(is.null(id_col_name)){id_col_name <- 1}       sf_df_w_bb_and_centers$id_col <- sf_df_w_bb_and_centers[,id_col_name]    return(sf_df_w_bb_and_centers)      }"},{"path":"/index.html","id":"fully-worked-example-how-youd-use-sf2stat-to-build-location-specific-functionality","dir":"","previous_headings":"","what":"Fully worked example: How you‚Äôd use sf2stat to build location-specific functionality","title":"What the Package Does (One Line, Title Case)","text":"Let‚Äôs see might recreate functionality ggnorthcarolina package","code":""},{"path":"/index.html","id":"step-00-prep-reference-data","dir":"","previous_headings":"Fully worked example: How you‚Äôd use sf2stat to build location-specific functionality","what":"Step 00. prep reference data","title":"What the Package Does (One Line, Title Case)","text":"","code":"usethis::use_data_raw()"},{"path":"/index.html","id":"section","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"","code":"nc <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\")) #> Reading layer `nc' from data source  #>   `/Library/Frameworks/R.framework/Versions/4.2/Resources/library/sf/shape/nc.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27  nc |>   dplyr::select(county_name = NAME, fips = FIPS) |>   sf_df_prep_for_stat(id_col_name = \"county_name\") -> geo_reference_northcarolina_county #> Warning in st_point_on_surface.sfc(sf::st_zm(dplyr::pull(sf_df, geometry))): #> st_point_on_surface may not give correct results for longitude/latitude data usethis::use_data(geo_reference_northcarolina_county) compute_panel_scope_region <- function(data, scales, keep_id = NULL, drop_id = NULL, stamp = FALSE){      if(!stamp){data <- dplyr::inner_join(data, geo_reference_scope_region)}   if( stamp){data <- geo_reference_scope_region }      if(!is.null(keep_id)){ data <- filter(data, id_col %in% keep_id) }   if(!is.null(drop_id)){ data <- filter(data, !(id_col %in% drop_id)) }      data    }  # step 2 StatSfscoperegion <- ggplot2::ggproto(`_class` = \"StatSfscoperegion\",                                 `_inherit` = ggplot2::Stat,                                 # required_aes = c(\"fips|county_name\"),                                 compute_panel = compute_panel_scope_region,                                default_aes = ggplot2::aes(label = after_stat(id_col)))   stat_region <- function(       mapping = NULL,       data = NULL,       geom = ggplot2::GeomSf,       position = \"identity\",       na.rm = FALSE,       show.legend = NA,       inherit.aes = TRUE,       crs = \"NAD27\", # \"NAD27\", 5070, \"WGS84\", \"NAD83\", 4326 , 3857       ...) {    c(ggplot2::layer_sf(               stat = StatSfscoperegion,  # proto object from step 2               geom = geom,  # inherit other behavior               data = data,               mapping = mapping,               position = position,               show.legend = show.legend,               inherit.aes = inherit.aes,               params = rlang::list2(na.rm = na.rm, ...)               ),                              coord_sf(crs = crs,                        default_crs = sf::st_crs(crs),                        datum = crs,                        default = TRUE)      )   } readme2pkg::chunk_variants_to_dir(chunk_name = \"stat_region_template\",                                   file_name = \"stat_county\",                                   replace1 = \"scope\",                                   replacements1 = \"northcarolina\",                                   replace2 = \"region\",                                   replacements2 = \"county\")"},{"path":"/index.html","id":"test-it-out","dir":"","previous_headings":"","what":"test it out","title":"What the Package Does (One Line, Title Case)","text":"","code":"source(\"./R/stat_county\")  library(ggplot2) nc |>   sf::st_drop_geometry() |>   ggplot() +   aes(fips = FIPS) +   stat_county() +    aes(fill = BIR79) #> Joining with `by = join_by(fips)`"},{"path":"/index.html","id":"make-derivitive-functions-aliases","dir":"","previous_headings":"","what":"Make derivitive functions, aliases","title":"What the Package Does (One Line, Title Case)","text":"","code":"geom_region <- stat_region geom_region_label <- function(...){stat_region(geom = \"text\",...)} stamp_region <- function(...){   stat_region(stamp = T,                data = mtcars,               aes(fill = NULL, color = NULL, label = NULL,                    fips = NULL, region_name = NULL),                ...)} stamp_region_label <- function(...){   stat_region(stamp = T,                geom = \"text\",                data = mtcars,                aes(fill = NULL, color = NULL,                   fips = NULL, region_name = NULL),                ...)} readme2pkg::chunk_variants_to_dir(chunk_name = \"geom_region_template\",                                   file_name = \"geom_county\",                                   replace1 = \"region\",                                   replacements1 = \"county\")"},{"path":"/index.html","id":"try-those-out","dir":"","previous_headings":"","what":"try those out","title":"What the Package Does (One Line, Title Case)","text":"","code":"source(\"./R/geom_county\")  nc |>   sf::st_drop_geometry() |>   ggplot() +   aes(fips = FIPS) +   geom_county() +    geom_county_label(check_overlap = T,                     color = \"grey85\") +   aes(fill = BIR79)  #> Joining with `by = join_by(fips)` #> Joining with `by = join_by(fips)` last_plot() +    stamp_county() +    stamp_county_label() #> Joining with `by = join_by(fips)` #> Joining with `by = join_by(fips)` ggplot() +    stamp_county() last_plot() +    stamp_county_label(check_overlap = T) last_plot() +    stamp_county(keep_id = \"Wake\", fill = \"darkred\")"},{"path":[]},{"path":"/index.html","id":"stamps-for-each-polygon","dir":"","previous_headings":"","what":"Stamps for each polygon?","title":"What the Package Does (One Line, Title Case)","text":"","code":"#' Title #' #' @param ...  #' #' @return #' @export #' #' @examples stamp_region_location <- function(...){stamp_region(keep_id = 'Location', ...)}  #' Title #' #' @param ...  #' #' @return #' @export #' #' @examples stamp_region_label_location <- function(...){stamp_region_label(keep_id = 'Location', ...)} ids <- geo_reference_northcarolina_county$county_name ids_snake <- tolower(geo_reference_northcarolina_county$county_name) |>    stringr::str_replace_all(\" \", \"_\")   readme2pkg::chunk_variants_to_dir(chunk_name = \"stamp_region_location\",                                    file_name = \"stamp_county_locations.R\",                                   replace1 = \"region\",                                   replacements1 = rep(\"county\", length(ids)),                               replace2 = \"location\",                               replacements2 = ids_snake,                               replace3 = \"Location\",                                replacements3 = ids) source(\"./R/stamp_county_locations.R\")   nc |>   sf::st_drop_geometry() |>   ggplot() +   aes(fips = FIPS) +    stamp_county() +    stamp_county_ashe(fill = \"darkred\")"},{"path":"/index.html","id":"template-functions-some-old-ideas-that-were-moving-away-from","dir":"","previous_headings":"","what":"Template functions. Some old ideas that we‚Äôre moving away from.","title":"What the Package Does (One Line, Title Case)","text":"experiment. code write layer multistep verbose, maybe providing templates good idea. maybe isn‚Äôt right place implementation.","code":""},{"path":"/index.html","id":"template_compute_panel_code","dir":"","previous_headings":"","what":"template_compute_panel_code()","title":"What the Package Does (One Line, Title Case)","text":"","code":"template_compute_panel_code <- function(){    \"compute_panel_geo_XXXX <- function(data, scales, keep_id = NULL, drop_id = NULL){      if(!is.null(keep_id)){ data <- filter(data, id_col %in% keep_id) }   if(!is.null(drop_id)){ data <- filter(data, !(id_col %in% drop_id)) }      if(!stamp){data <- dplyr::inner_join(data, geo_ref_XXXX)}   if( stamp){data <- geo_ref_XXXX }      data    }\" |> cat()    }"},{"path":"/index.html","id":"template_stat_code","dir":"","previous_headings":"","what":"template_stat_code()","title":"What the Package Does (One Line, Title Case)","text":"","code":"template_stat_code <- function(){    'StatXXXXsf <- ggplot2::ggproto(`_class` = \"StatXXXXsf\",                                 `_inherit` = ggplot2::Stat,                                 required_aes = c(\"fips|county_name|XXXX\"),                                 compute_panel = compute_panel_geo_XXXX,                                default_aes = c(label = ggplot2::after_stat(id_col)))' |> cat() }"},{"path":"/index.html","id":"template_layer_code","dir":"","previous_headings":"","what":"template_layer_code()","title":"What the Package Does (One Line, Title Case)","text":"","code":"template_layer_code <- function(){ 'stat_XXXX <- function(       mapping = NULL,       data = NULL,       geom = ggplot2::GeomSf,       position = \"identity\",       na.rm = FALSE,       show.legend = NA,       inherit.aes = TRUE,       crs = \"NAD27\", # \"NAD27\", 5070, \"WGS84\", \"NAD83\", 4326 , 3857       ...) {    c(ggplot2::layer_sf(               stat = StatXXXX,  # proto object from step 2               geom = geom,  # inherit other behavior               data = data,               mapping = mapping,               position = position,               show.legend = show.legend,               inherit.aes = inherit.aes,               params = rlang::list2(na.rm = na.rm, ...)               ),                              coord_sf(crs = crs,                        default_crs = sf::st_crs(crs),                        datum = crs,                        default = TRUE)      )   }' |> cat()  }"},{"path":[]},{"path":[]},{"path":"/index.html","id":"bit-a-created-package-archetecture-running-devtoolscreate-in-interactive-session--","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit A. Created package archetecture, running devtools::create(\".\") in interactive session. üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"","code":"devtools::create(\".\")"},{"path":"/index.html","id":"bit-b-added-roxygen-skeleton--","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit B. Added roxygen skeleton? üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"Use roxygen skeleton auto documentation making sure proposed functions exported. Generally, early , don‚Äôt much (anything) terms filling skeleton documentation, things may change.","code":""},{"path":"/index.html","id":"bit-c-managed-dependencies---","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit C. Managed dependencies ? üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"Package dependencies managed, .e.¬†depend::function() proposed functions declared DESCRIPTION","code":"usethis::use_package(\"sf\") usethis::use_package(\"dplyr\") usethis::use_package(\"tibble\") usethis::use_package(\"tidyr\") usethis::use_package(\"purrr\")"},{"path":"/index.html","id":"bit-d-moved-functions-r-folder--","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit D. Moved functions R folder? üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"Use new {readme2pkg} function readme‚Ä¶","code":"readme2pkg::chunk_to_r(\"sf_df_return_bbox_df\") readme2pkg::chunk_to_r(\"sf_df_add_xy_center_coords\") readme2pkg::chunk_to_r(\"sf_df_prep_for_stat\") readme2pkg::chunk_to_r(\"template_compute_panel_code\") readme2pkg::chunk_to_r(\"template_stat_code\") readme2pkg::chunk_to_r(\"template_layer_code\")"},{"path":"/index.html","id":"bit-e-run-devtoolscheck-and-addressed-errors--","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit E. Run devtools::check() and addressed errors. üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"","code":"devtools::check(pkg = \".\")"},{"path":"/index.html","id":"bit-f-install-and-restart-package--","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit F. Install and restart package üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"","code":"devtools::build()"},{"path":"/index.html","id":"bit-g-write-traditional-readme-that-uses-built-package-also-serves-as-a-test-of-build--","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit G. Write traditional README that uses built package (also serves as a test of build. üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"goal {xxxx} package ‚Ä¶ Install package : functions exported can remove go two colons, things really finalized, go without colons (rearrange readme‚Ä¶)","code":"remotes::installgithub(\"EvaMaeRey/readme2pkg.template\") library(sf2stat)  ##<< change to your package name here  nc <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\"))  nc |>   dplyr::select(county_name = NAME, fips = FIPS) |>   sf2stat::sf_df_prep_for_stat(id_col_name = \"county_name\") -> nc_geo_reference"},{"path":"/index.html","id":"bit-h-chosen-a-license--","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit H. Chosen a license? üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"","code":"usethis::use_mit_license()"},{"path":"/index.html","id":"bit-i-add-lifecycle-badge-experimental","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit I. Add lifecycle badge (experimental)","title":"What the Package Does (One Line, Title Case)","text":"","code":"usethis::use_lifecycle_badge(\"experimental\")"},{"path":"/index.html","id":"phase-2-listen--iterate--","dir":"","previous_headings":"","what":"Phase 2: Listen & iterate üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"Try get feedback experts API, implementation, default decisions. already work solves problem?","code":""},{"path":[]},{"path":[]},{"path":"/index.html","id":"bit-b-written-formal-tests-of-functions-and-save-to-test-that-folders--","dir":"","previous_headings":"Phase 3: Let things settle","what":"Bit B. Written formal tests of functions and save to test that folders üöß ‚úÖ","title":"What the Package Does (One Line, Title Case)","text":"look like ‚Ä¶","code":"library(testthat)  test_that(\"calc times 2 works\", {   expect_equal(times_two(4), 8)   expect_equal(times_two(5), 10)    }) readme2pkg::chunk_to_tests_testthat(\"test_calc_times_two_works\")"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/index.html","id":"edit-description-file","dir":"","previous_headings":"","what":"Edit Description file","title":"What the Package Does (One Line, Title Case)","text":"","code":"readLines(\"DESCRIPTION\")"},{"path":"/index.html","id":"environment","dir":"","previous_headings":"","what":"Environment","title":"What the Package Does (One Line, Title Case)","text":"just want print packages versions","code":"all <- sessionInfo() |> print() |> capture.output() all[11:17] #> [1] \"\"                                                                          #> [2] \"attached base packages:\"                                                   #> [3] \"[1] stats     graphics  grDevices utils     datasets  methods   base     \" #> [4] \"\"                                                                          #> [5] \"other attached packages:\"                                                  #> [6] \" [1] lubridate_1.9.2      forcats_1.0.0        stringr_1.5.0       \"       #> [7] \" [4] dplyr_1.1.0          purrr_1.0.1          readr_2.1.4         \""},{"path":"/index.html","id":"devtoolscheck-report","dir":"","previous_headings":"","what":"devtools::check() report","title":"What the Package Does (One Line, Title Case)","text":"","code":"devtools::check(pkg = \".\")"}]
